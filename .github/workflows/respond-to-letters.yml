name: Respond to Letters

on:
  push:
    paths:
      - "letters/to-mentor/**.md" # Trigger only for markdown files
      # Consider adding a .gitkeep to letters/to-mentor if it might be empty

  workflow_dispatch: # Allow manual triggering

jobs:
  respond-to-letter:
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    permissions: # Add permissions to write back to the repo
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch full history needed for `git diff` approach in find-new-letters
          # If find-new-letters changes approach, this can be optimized
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: 'npm' # Cache npm dependencies

      - name: Install dependencies
        run: npm ci # Use ci for faster, consistent installs

      - name: Build TypeScript
        run: npm run build # Assuming 'build' script compiles TS to JS in 'dist'

      - name: Identify new/modified letters
        id: find_letters
        run: |
          # Use git diff to find new/modified files in the letters/to-mentor dir
          # This is more robust than just listing files
          # Compares the current commit with the previous one for the push event
          # For workflow_dispatch, compare HEAD with HEAD~1 (or handle initial case)
          if [ "${{ github.event_name }}" == "push" ]; then
            # Find files added or modified in the push
            files=$(git diff --name-only --diff-filter=AM ${{ github.event.before }} ${{ github.sha }} -- letters/to-mentor/**.md | xargs)
          elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # Manual trigger: Find all .md files in the directory for now
            # A more robust approach would track processed files, but this is simpler for manual runs.
            echo "Workflow dispatch: finding all markdown files in letters/to-mentor/"
            files=$(find letters/to-mentor -maxdepth 1 -name '*.md' -print0 | xargs -0)
          else
            echo "Unsupported event type: ${{ github.event_name }}"
            files=""
          fi
          
          echo "Potential files: $files"
          if [ -z "$files" ]; then
            echo "No new or modified letters found."
            echo "files=" >> $GITHUB_OUTPUT
          else
            # Filter out files that might already be in the archive (in case of re-runs or manual triggers)
            valid_files=""
            archive_dir="archive/letters/to-mentor/"
            for file in $files; do
              filename=$(basename "$file")
              # Check if a file with the same name exists in any YYYY-MM subdir of the archive
              if ! find "$archive_dir" -mindepth 2 -maxdepth 2 -name "$filename" -print -quit | grep -q .; then
                valid_files="$valid_files $file"
              else
                echo "Skipping already archived file: $file"
              fi
            done
            trimmed_files=$(echo "$valid_files" | xargs) # Trim leading/trailing whitespace
            echo "Valid files to process: $trimmed_files"
            echo "files=$trimmed_files" >> $GITHUB_OUTPUT
          fi

      - name: Process letters if any found
        id: process_letters
        if: steps.find_letters.outputs.files != ''
        run: |
          echo "Processing letters: ${{ steps.find_letters.outputs.files }}"
          # Assume the script returns non-zero on error, or we can modify it later
          node dist/scripts/process-letters.js ${{ steps.find_letters.outputs.files }} && echo "processed=true" >> $GITHUB_OUTPUT
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
          # Ensure NODE_ENV or other relevant env vars are set if needed by config/scripts

      - name: Commit response and updated profile
        if: success() && steps.process_letters.outputs.processed == 'true'
        run: |
          git config --local user.email "academy@techdeck.life"
          git config --local user.name "TechDeck Academy Bot"
          # Add generated response, archived original, updated profile AND ai-memory
          git add letters/from-mentor/ archive/letters/to-mentor/ student-profile.json ai-memory.md
          git commit -m "Respond to student letters and update profile" || echo "No changes to commit"
          git push 