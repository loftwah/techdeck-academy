name: Rotate and Archive Files

# Grant write permissions for contents
permissions:
  contents: write

on:
  schedule:
    # Runs daily at 01:00 UTC
    - cron: '0 1 * * *' 
  workflow_dispatch:
    inputs:
      forceRotation:
        description: "Force rotation even if conditions aren't met"
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '20'

jobs:
  rotate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' 
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Build TypeScript
        run: npm run build # Assuming this compiles scripts/*.ts to dist/scripts/*.js

      - name: Check if rotation needed
        id: check-rotation
        # Pass workflow input to the script via env var
        env: 
          INPUT_FORCEROTATION: ${{ github.event.inputs.forceRotation }}
        # Run the compiled TS script and capture its stdout
        run: |
          output=$(node dist/scripts/check-rotation-needed.js)
          echo "Output from script: $output"
          echo "should_rotate=$output" >> $GITHUB_OUTPUT

      - name: Perform Rotation (if needed)
        if: steps.check-rotation.outputs.should_rotate == 'true'
        run: |
          echo "Rotation needed, performing rotation..."
          # Define archive directory structure
          ARCHIVE_SUB_DIR="archive/submissions/$(date +%Y-%m)"
          mkdir -p "$ARCHIVE_SUB_DIR"
          
          echo "Archiving submission directories to $ARCHIVE_SUB_DIR"
          # Find and move directories directly under submissions/
          # Use find for robustness (handles empty dir, names with spaces etc.)
          find submissions -mindepth 1 -maxdepth 1 -type d -exec mv -t "$ARCHIVE_SUB_DIR" {} +
          
          # Optionally, add logic for challenges and feedback if they also need rotation
          # ARCHIVE_CHAL_DIR="archive/challenges/$(date +%Y-%m)"
          # mkdir -p "$ARCHIVE_CHAL_DIR"
          # find challenges -mindepth 1 -maxdepth 1 -type f -name '*.json' -exec mv -t "$ARCHIVE_CHAL_DIR" {} + 
          
          # ARCHIVE_FB_DIR="archive/feedback/$(date +%Y-%m)"
          # mkdir -p "$ARCHIVE_FB_DIR"
          # find feedback -mindepth 1 -maxdepth 1 -type f -name '*.json' -exec mv -t "$ARCHIVE_FB_DIR" {} +
          
          echo "Rotation actions complete."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed if committing changes

      - name: No Rotation Needed
        if: steps.check-rotation.outputs.should_rotate == 'false'
        run: |
          echo "Rotation conditions not met. Skipping rotation."

      - name: Generate rotation report
        if: steps.check-rotation.outputs.should_rotate == 'true'
        run: |
          # Create report directory if it doesn't exist
          mkdir -p progress/cleanup-reports
          REPORT_FILE="progress/cleanup-reports/$(date +%Y-%m)-rotation.md"
          ARCHIVE_DATE_DIR="$(date +%Y-%m)"

          # Generate report
          {
            echo "# File Rotation Report"
            echo "Date: $(date -u)"
            echo
            echo "## Current File Counts (Before Archival)"
            echo "*   Challenges: $(ls -1 challenges/*.json 2>/dev/null | wc -l) files"
            # Count directories in submissions
            echo "*   Submissions: $(find submissions -mindepth 1 -maxdepth 1 -type d 2>/dev/null | wc -l) directories"
            echo "*   Feedback: $(ls -1 feedback/*.json 2>/dev/null | wc -l) files"
            echo
            echo "## Archive Counts (After Archival)"
            echo "*   Archived Challenges: $(find archive/challenges -mindepth 1 -type f 2>/dev/null | wc -l) files" # Assuming challenges are files
            # Count directories within the dated archive folders
            echo "*   Archived Submissions: $(find archive/submissions -mindepth 2 -maxdepth 2 -type d 2>/dev/null | wc -l) directories"
            echo "*   Archived Feedback: $(find archive/feedback -mindepth 1 -type f 2>/dev/null | wc -l) files" # Assuming feedback are files
            echo
            echo "Files/Directories were archived into directories named like \`archive/.../$ARCHIVE_DATE_DIR\`"
          } > "$REPORT_FILE"
          
          echo "Rotation report generated at $REPORT_FILE"

      - name: Commit changes
        if: success() && steps.check-rotation.outputs.should_rotate == 'true'
        run: |
          git config --local user.email "academy@techdeck.life"
          git config --local user.name "TechDeck Academy Bot"
          git add .
          git commit -m "Monthly file rotation and cleanup" || echo "No changes to commit"
          git push 