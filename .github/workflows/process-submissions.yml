name: Process Submissions

# Grant write permissions for contents
permissions:
  contents: write

on:
  push:
    branches:
      - main
    paths:
      - 'submissions/**'
  
  # Manual trigger
  workflow_dispatch:
    inputs:
      submissionId:
        description: 'Specific submission directory name to process (e.g., CC-123)'
        required: false
        type: string

env:
  NODE_VERSION: '20'

jobs:
  process-submission:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # To identify new/changed files

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Identify submissions to process
        id: identify-submissions
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.submissionId }}" ]]; then
            # Process specific submission directory (assuming submissionId is the directory name)
            echo "submission_dirs=submissions/${{ github.event.inputs.submissionId }}" >> $GITHUB_OUTPUT
          else
            # Get unique parent directories of newly added or modified files within submissions/
            # Exclude changes directly to the submissions/ directory itself or files directly within it (if any)
            CHANGED_DIRS=$(git diff --name-only HEAD^ HEAD | grep '^submissions/.\+/' | sed 's|\(/[^/]*\)$||' | sort -u || true)
            if [[ -z "$CHANGED_DIRS" ]]; then
              echo "No new submission directories to process"
              echo "submission_dirs=" >> $GITHUB_OUTPUT
            else
              echo "Found changed submission directories:"
              echo "$CHANGED_DIRS" # Log the directories found
              # Output the list of directories, one per line
              echo "submission_dirs=$(echo "$CHANGED_DIRS" | tr '\n' ' ')" >> $GITHUB_OUTPUT 
            fi
          fi

      - name: Process submissions
        if: steps.identify-submissions.outputs.submission_dirs != ''
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
        run: |
          # Initialize the application (assuming initialization is still needed once)
          # Ensure dist/index.js is built if not already
          if [ ! -f dist/index.js ]; then
            echo "Building project..."
            npm run build
          fi
          node -e "
            import('./dist/src/index.js').then(async ({initialize}) => {
              await initialize();
            }).catch(err => { console.error('Initialization failed:', err); process.exit(1); });
          "

          # Process each submission directory
          # Use xargs to handle potential spaces/newlines in directory names robustly
          # Pass directory path as environment variable to avoid quoting issues
          echo "${{ steps.identify-submissions.outputs.submission_dirs }}" | xargs -I {} bash -c \
          'export SUBMISSION_DIR="{}"; \
            echo "Processing submission directory: $SUBMISSION_DIR"; \
            node -e "\
              import(\"./dist/src/index.js\").then(async ({processSubmission}) => { \
                const dirPath = process.env.SUBMISSION_DIR; \
                if (!dirPath) { throw new Error(\"SUBMISSION_DIR env var not set\"); } \
                await processSubmission(dirPath); \
              }).catch(err => { \
                console.error(\"Error processing directory '$SUBMISSION_DIR':\", err); \
                process.exit(1); \
              }); \
            "'
          # Old loop:
          # echo "${{ steps.identify-submissions.outputs.submission_dirs }}" | while IFS= read -r submissionDir; do
          #   if [[ -z "$submissionDir" ]]; then continue; fi # Skip empty lines
          #   echo "Processing submission directory: $submissionDir"
          #   # Assume processSubmission function now takes the directory path
          #   node -e "
          #     import('./dist/index.js').then(async ({processSubmission}) => {
          #       // Pass the directory path to the processing function
          #       await processSubmission('$submissionDir'); 
          #     }).catch(err => { console.error('Error processing directory $submissionDir:', err); process.exit(1); });
          #   "
          # done


      - name: Commit submission and feedback
        if: success()
        run: |
          git config --local user.email "academy@techdeck.life"
          git config --local user.name "TechDeck Academy Bot"
          # Add the generated feedback, progress reports, updated profile AND ai-memory
          git add feedback/ progress/ student-profile.json ai-memory.md 
          # Also add the original submission directories/files to the commit
          git add submissions/
          # Use a more generic commit message or try to extract submission identifier if needed
          COMMIT_MSG="Process submissions and provide feedback"
          # Optionally, add specific directory names if available and not too long
          # SUB_DIRS_MSG=$(echo "${{ steps.identify-submissions.outputs.submission_dirs }}" | head -c 100) # Limit length
          # if [[ -n "$SUB_DIRS_MSG" ]]; then COMMIT_MSG="Process submissions ($SUB_DIRS_MSG) and provide feedback"; fi
          git commit -m "$COMMIT_MSG" || echo "No changes to commit"
          git push 