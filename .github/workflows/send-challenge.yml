name: Send Challenge

# Grant write permissions for contents
permissions:
  contents: write

on:
  schedule:
    # Daily at 9AM UTC
    - cron: "0 9 * * *"
    # Mon, Wed, Fri at 9AM UTC
    - cron: "0 9 * * 1,3,5"
    # Weekly on Monday at 9AM UTC
    - cron: "0 9 * * 1"

  # Manual trigger
  workflow_dispatch:

env:
  NODE_VERSION: '20'

jobs:
  generate-challenge:
    runs-on: ubuntu-latest
    # Add concurrency block to prevent simultaneous runs
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: false # Don't cancel scheduled runs if manual one is triggered?
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Check schedule configuration
        id: check-schedule
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
        run: |
          # Get current schedule from config
          SCHEDULE=$(node -e '
            import("./dist/index.js").then(({config}) => {
              console.log(config.schedule.challengeFrequency);
            }).catch(err => {
              console.error("Error reading schedule config:", err);
              process.exit(1);
            });
          ')
          
          # Get current day (0 = Sunday, 1 = Monday, etc.)
          DAY=$(date +%u)
          
          # Determine if we should run today
          SHOULD_RUN="false"
          case $SCHEDULE in
            "daily")
              SHOULD_RUN="true"
              ;;
            "threePerWeek")
              if [[ $DAY == "1" || $DAY == "3" || $DAY == "5" ]]; then
                SHOULD_RUN="true"
              fi
              ;;
            "weekly")
              if [[ $DAY == "1" ]]; then
                SHOULD_RUN="true"
              fi
              ;;
          esac
          
          echo "should_run=$SHOULD_RUN" >> $GITHUB_OUTPUT

      - name: Check for outstanding challenges
        id: check-outstanding
        env:
          # Needed for file utilities
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }} 
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
        run: |
          # Use node script to check for challenge files without corresponding feedback
          # FIX: Redirect stdout to /dev/null to silence console.log interfering with shell
          # FIX: Use single quotes for node -e argument
          node -e '
            import path from "path";
            import fs from "fs/promises";
            import os from "os";
            import { PATHS, fileExists } from "./dist/utils/files.js"; 
            
            async function hasOutstandingChallenge() {
              try {
                const challengeFiles = await fs.readdir(PATHS.challenges);
                for (const challengeFile of challengeFiles) {
                  if (!challengeFile.endsWith(".json")) continue;
                  const challengeId = path.basename(challengeFile, ".json");
                  const feedbackPath = path.join(PATHS.feedback, `${challengeId}.json`);
                  if (!await fileExists(feedbackPath)) {
                    return true;
                  }
                }
              } catch (error) {
                 if (error instanceof Error && "code" in error && error.code === "ENOENT") {
                   return false;
                 }
                 console.error("Error checking for outstanding challenges:", error);
                 return false; 
              }
              return false;
            }

            hasOutstandingChallenge().then(outstanding => {
              if (typeof outstanding === "boolean") {
                 const outputFilePath = process.env.GITHUB_OUTPUT;
                 if (outputFilePath) {
                   fs.appendFile(outputFilePath, `outstanding_challenge=${outstanding}${os.EOL}`);
                 } else {
                   console.error("GITHUB_OUTPUT environment variable not set.");
                   process.exit(1);
                 }
              } else {
                console.error("hasOutstandingChallenge() resolved with unexpected value:", outstanding);
                process.exit(1);
              }
            }).catch(err => {
              console.error("Error executing hasOutstandingChallenge promise:", err);
              process.exit(1);
            });
          ' > /dev/null

      - name: Generate and send challenge or welcome
        # Add check for outstanding challenges and ensure schedule allows it OR manual trigger
        if: steps.check-outstanding.outputs.outstanding_challenge == 'false' && (steps.check-schedule.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch')
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
        run: |
          node -e "
            import('./dist/index.js').then(async ({initialize, generateChallenge, config, files, profile}) => {
              const studentProfile = await initialize();

              // Check config flag OR profile status OR if challenges have already been completed
              const shouldGenerateChallenge = config.introductionSubmitted || 
                                              studentProfile.status === 'active' || 
                                              studentProfile.completedChallenges > 0;
              
              if (shouldGenerateChallenge) {
                console.log('Introduction submitted (config flag), status is active, or challenges already started. Generating challenge...');
                await generateChallenge();
              } else {
                console.log('Introduction not submitted (config flag), profile status is not active, and no challenges completed. Welcome email was sent during initialization.');
              }
            });
          "

      - name: Commit changes
        if: success()
        run: |
          git config --local user.email "academy@techdeck.life"
          git config --local user.name "TechDeck Academy Bot"
          git add challenges/ progress/
          git commit -m "Generate new challenge" || echo "No changes to commit"
          git push 